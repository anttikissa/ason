#!/usr/bin/env node
// vim:set ft=javascript:

var assert = require('basic-assert');
var ason = require('./ason');

// Tokenizing

function tokNum(value) { return { type: 'number', value: value }; }
function tokStr(value) { return { type: 'string', value: value }; }
function tokDel(value) { return { type: 'delim', delim: value }; }

assert.eq(ason.tokenize('123'), [{ type: 'number', value: 123 }]);
assert.eq(ason.tokenize('"foo"'), [tokStr('foo')]);
assert.eq(ason.tokenize('123"foo"'), [tokNum(123), tokStr('foo')]);
assert.eq(ason.tokenize('123"foo"123'), [tokNum(123), tokStr('foo'), tokNum(123)]);
assert.eq(ason.tokenize('1.23e123'), [tokNum(1.23e123)]);

// TODO make number parsing stricter
// assert.throws(function() { return ason.tokenize('1.2+-3e12eE3'); });

[':', '{', '}', '[', ']'].forEach(function(delim) {
	assert.eq(ason.tokenize(delim), [tokDel(delim)]);
});

assert.eq(
	ason.tokenize('\n "a" \n\t : 123\n\t'),
	[tokStr('a'), tokDel(':'), tokNum(123)]);

// Parsing

assert.throws(function() { ason.parse('') });

// A sketch for what's coming
assert.eq(ason.parse('"string\n"'), "string\n");
assert.eq(ason.parse('123'), 123);
assert.eq(ason.parse('{ x: 1 }'), { x: 1 });

assert.eq(ason.parse('1, 2, 3'), [1, 2, 3]);
assert.eq(ason.parse('1, 2, foo: "bar"'), [1, 2, { foo: 'bar' }]);
assert.eq(ason.parse('1, 2, foo: "bar"', 'last'), [1, 2, { foo: 'bar' }, 'last']);
assert.eq(ason.parse('foo: "bar"'), { foo: 'bar' });

// Probably should be an error
assert.eq(ason.parse('1, person: name: "Name", age: 123, "then-what?"'), '???');

// Stringifying

assert.eq(ason.stringify({}), "");

