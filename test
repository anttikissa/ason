#!/usr/bin/env node
// vim:set ft=javascript:

var assert = require('basic-assert');
var ason = require('./ason');

function test(what) {
	console.log("Testing", what);
}

// Tokenizing

function tokNum(value) { return { type: 'number', value: value }; }
function tokStr(value) { return { type: 'string', value: value }; }
function tokId(value) { return { type: 'id', value: value }; }
function tokDel(value) { return { type: 'delim', delim: value }; }

assert.eq(ason.tokenize('123'), [{ type: 'number', value: 123 }]);
assert.eq(ason.tokenize('"foo"'), [tokStr('foo')]);
assert.eq(ason.tokenize('123"foo"'), [tokNum(123), tokStr('foo')]);
assert.eq(ason.tokenize('123"foo"123'), [tokNum(123), tokStr('foo'), tokNum(123)]);
assert.eq(ason.tokenize('1.23e123'), [tokNum(1.23e123)]);
assert.eq(ason.tokenize('_hello-WORLD-123$$'), [tokId('_hello-WORLD-123$$')]);

// TODO make number parsing stricter
// assert.throws(function() { return ason.tokenize('1.2+-3e12eE3'); });

[':', '{', '}', '[', ']'].forEach(function(delim) {
	assert.eq(ason.tokenize(delim), [tokDel(delim)]);
});

assert.eq(
	ason.tokenize('\n "a" \n\t : 123\n\t'),
	[tokStr('a'), tokDel(':'), tokNum(123)]);

// Parsing

assert.throws(function() { ason.parse('') });

// TODO more tests for simple values
assert.eq(ason.parse('"string\n"'), "string\n");
assert.eq(ason.parse('123'), 123);

test('arrays');
assert.eq(ason.parse('[]'), []);
assert.eq(ason.parse('[1]'), [1]);
assert.eq(ason.parse('[1,]'), [1,]);
assert.throws(function() { ason.parse('[1,,]'); });
assert.eq(ason.parse('[[]]'), [[]]);
assert.eq(ason.parse('[[[]], 4]'), [[[]], 4]);
assert.eq(ason.parse('[[[]], [1, [2]], [3, ], 4,]'), [[[]], [1, [2]], [3], 4]);
assert.throws(function() { ason.parse('[,]'); });
assert.eq(ason.parse('[ 1, 2, 3 ]'), [1, 2, 3]);
assert.eq(ason.parse('[ 1, [ 2, 3, ] ]'), [1, [2, 3]]);

test('objects');
assert.eq(ason.parse('{ xxx: 1 }'), { xxx: 1 });
assert.eq(ason.parse("{ 'yyy': 2 }"), { yyy: 2 });
assert.eq(ason.parse('{ "zzz": 2 }'), { zzz: 2 });
assert.eq(ason.parse('{ a: { b: 2, c: 3 } }'), { a: { b: 2, c: 3 } });
assert.eq(ason.parse('{ a: { b: 2, c: 3, } }'), { a: { b: 2, c: 3, } });
assert.throws(function() { ason.parse('{ a: { b: 2, c: 3,, } }'); });

test('nested');
assert.eq(ason.parse('{ a: [] }'), { a: [] });
assert.eq(ason.parse('[{}, {}]'), [{}, {}]);
assert.eq(ason.parse('{ a: ["b", { c: { d: 5 } }, ], e: "f" }'), { a: ['b', { c: { d: 5 } }], e: 'f' });

test('plain-form');

assert.eq(ason.parse('1, 2, 3'), [1, 2, 3]);
assert.eq(ason.parse('1, 2, foo: "bar"'), [1, 2, { foo: 'bar' }]);
assert.eq(ason.parse('1, 2, foo: "bar"', 'last'), [1, 2, { foo: 'bar' }, 'last']);
assert.eq(ason.parse('foo: "bar"'), { foo: 'bar' });
assert.eq(ason.parse('[1, 2], 3'), [[1, 2], 3]);
assert.eq(ason.parse('a: 1, 2, b: 3'), [{ a: 1 }, 2, { b: 3 }]);

// Probably should be an error
assert.eq(ason.parse('1, person: name: "Name", age: 123, "then-what?"'), '???');

// Stringifying

assert.eq(ason.stringify({}), "");

